// Mocks generated by Mockito 5.3.2 from annotations
// in http_cache/src/http_cache_base.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:http/http.dart' as _i3;
import 'package:http_cache/http_cache.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCachesNetworkRequest_0 extends _i1.SmartFake
    implements _i2.CachesNetworkRequest {
  _FakeCachesNetworkRequest_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkResponse_1<Success, NetworkException> extends _i1.SmartFake
    implements _i2.NetworkResponse<Success, NetworkException> {
  _FakeNetworkResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpCache extends _i1.Mock implements _i2.HttpCache {
  @override
  _i2.CachesNetworkRequest get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeCachesNetworkRequest_0(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeCachesNetworkRequest_0(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i2.CachesNetworkRequest);
  @override
  set httpCacheConfig(_i2.HttpCacheConfig? _httpCacheConfig) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpCacheConfig,
          _httpCacheConfig,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get asyncStorage => (super.noSuchMethod(
        Invocation.getter(#asyncStorage),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set currentResponse(
          _i2.NetworkResponse<_i3.Response, _i2.NetworkException>?
              _currentResponse) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentResponse,
          _currentResponse,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<T?> request<T>(dynamic incomingHttpCacheConfig) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [incomingHttpCacheConfig],
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
  @override
  _i4.Future<T?> checkCacheFirst<T>() => (super.noSuchMethod(
        Invocation.method(
          #checkCacheFirst,
          [],
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
  @override
  _i4.Future<T?> overwrite<T>() => (super.noSuchMethod(
        Invocation.method(
          #overwrite,
          [],
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
  @override
  _i4.Future<void> updateCache<T>(
    T? data,
    String? cacheKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCache,
          [
            data,
            cacheKey,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<T?> getFromStorage<T>() => (super.noSuchMethod(
        Invocation.method(
          #getFromStorage,
          [],
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
  @override
  _i4.Future<void> setStorage<T>(
    T? networkValue,
    int? ttl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStorage,
          [
            networkValue,
            ttl,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<T?> convert<T>(String? responseBody) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [responseBody],
        ),
        returnValue: _i4.Future<T?>.value(),
        returnValueForMissingStub: _i4.Future<T?>.value(),
      ) as _i4.Future<T?>);
  @override
  _i4.Future<
      _i2.NetworkResponse<
          _i3.Response,
          _i2
              .NetworkException>> requestFromNetwork(
          _i4.Future<_i3.Response> Function()? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestFromNetwork,
          [request],
        ),
        returnValue: _i4.Future<
                _i2.NetworkResponse<_i3.Response, _i2.NetworkException>>.value(
            _FakeNetworkResponse_1<_i3.Response, _i2.NetworkException>(
          this,
          Invocation.method(
            #requestFromNetwork,
            [request],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2.NetworkResponse<_i3.Response, _i2.NetworkException>>.value(
            _FakeNetworkResponse_1<_i3.Response, _i2.NetworkException>(
          this,
          Invocation.method(
            #requestFromNetwork,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.NetworkResponse<_i3.Response, _i2.NetworkException>>);
  @override
  _i4.Future<
      _i2.NetworkResponse<_i3.Response, _i2.NetworkException>> makeRequest(
          _i4.Future<_i3.Response> Function()? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #makeRequest,
          [request],
        ),
        returnValue: _i4.Future<
                _i2.NetworkResponse<_i3.Response, _i2.NetworkException>>.value(
            _FakeNetworkResponse_1<_i3.Response, _i2.NetworkException>(
          this,
          Invocation.method(
            #makeRequest,
            [request],
          ),
        )),
        returnValueForMissingStub: _i4.Future<
                _i2.NetworkResponse<_i3.Response, _i2.NetworkException>>.value(
            _FakeNetworkResponse_1<_i3.Response, _i2.NetworkException>(
          this,
          Invocation.method(
            #makeRequest,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.NetworkResponse<_i3.Response, _i2.NetworkException>>);
  @override
  void printError(_i2.NetworkException? failure) => super.noSuchMethod(
        Invocation.method(
          #printError,
          [failure],
        ),
        returnValueForMissingStub: null,
      );
}
